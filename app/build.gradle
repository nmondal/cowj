/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {

    id 'base'
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // https://imperceptiblethoughts.com/shadow/introduction/
    // id 'com.github.johnrengelman.shadow'  version "8.1.1"
    // code coverage jacoco
    id 'jacoco'
    // dependencies update check :: gradle dependencyUpdates
    id "com.github.ben-manes.versions" version "0.53.0"
    // maven publish
    id 'maven-publish'
}
ext {
    // if this property is set, then we are add the coverage stuff
    isCoverage =  System.properties['cowj.cover'] != null
    zmbPrefix = isCoverage ?  'INSTRUMENTED-' : '' // handle coverage binary
    zmbBinary = 'org.zoomba-lang:zoomba.lang.core:' + zmbPrefix + '0.3-SNAPSHOT'

    // now fast changing versions
    spark_version      = '3.0.2'
    groovy_version     = '5.0.2'
    jython_version     = '2.7.4'
    kotlin_version     = '2.3.0-Beta2'
    quartz_version     = '2.5.1'
    jackson_version    = '2.20.0'
    jcasbin_version    = '1.85.1'
    jedis_version      = '7.0.0'
    graal_version      = '23.1.9' // https://github.com/oracle/graal/issues/7651 for JDK 21
    // now cloud providers client dependencies
    // amazon aws is really good at keeping versions together
    aws_client_version = '2.36.3'
    // google cloud and microsoft azure are terrible at keeping versioning
    // test binary
    mockito_version    = '5.20.0'
}

// the maven identifiers
group = 'org.zoomba-lang'
version = isCoverage ? '0.1-cover-SNAPSHOT' :  '0.1-SNAPSHOT'

base{
    archivesName = 'cowj'
}

repositories {
    // mavenLocal() // local repo
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    // add central sonatype snapshot repository for all org.zoomba-lang artifacts
    // especially zoomba core
    maven {
        name = 'Central Portal Snapshots'
        url = 'https://central.sonatype.com/repository/maven-snapshots/'
    }
    gradlePluginPortal()
}


configurations {
    /* https://discuss.gradle.org/t/how-to-choose-only-some-dependencies-to-copy-to-a-folder/19629/2  */
    graalJSCompileModule
}

dependencies {

    implementation ( zmbBinary ) { changing = true }
    implementation ( "org.zoomba-lang:spark-core:$spark_version" ) { changing = true }
    // end of local libraries
    implementation 'org.slf4j:slf4j-jdk14:2.1.0-alpha1'

    // Scripting Engines JSR-223

    // graal-js
    implementation "org.graalvm.polyglot:js:$graal_version"
    implementation "org.graalvm.js:js-scriptengine:$graal_version"

    // groovy
    implementation "org.apache.groovy:groovy:$groovy_version"
    implementation "org.apache.groovy:groovy-jsr223:$groovy_version"
    // jython ???
    implementation "org.python:jython-standalone:$jython_version"
    // Kotlin - hold all libs to same version, as long as it works
    implementation "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-scripting-jsr223:$kotlin_version"

    // Cron
    // https://mvnrepository.com/artifact/org.quartz-scheduler/quartz
    implementation "org.quartz-scheduler:quartz:$quartz_version"

    // schema handler
    implementation 'org.zoomba-lang:medeia-validator-jackson:1.6'
    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"

    // Auth
    implementation "org.casbin:jcasbin:$jcasbin_version"

    // Identity
    implementation 'com.azure:azure-identity:1.18.1'

    // File Watching ....
    implementation 'io.methvin:directory-watcher:0.19.1'

    // Expiring map
    // For Auth Token, JDBC Connection Expiry,
    implementation 'net.jodah:expiringmap:0.5.11'
    ////////// Plugin Stuff //////////////

    // Storage...
    implementation "redis.clients:jedis:$jedis_version"
    implementation 'com.google.cloud:google-cloud-storage:2.59.0'
    implementation "software.amazon.awssdk:s3:$aws_client_version"
    implementation "software.amazon.awssdk:apache-client:$aws_client_version"
    implementation 'com.azure:azure-storage-blob:12.32.0'


    // Message Queueing
    implementation "software.amazon.awssdk:sqs:$aws_client_version"
    implementation 'com.azure:azure-storage-queue:12.27.0'
    implementation 'com.google.cloud:google-cloud-pubsub:1.143.0'


    // fcm - close to Messaging, but not close enough
    implementation 'com.google.firebase:firebase-admin:9.7.0'

    // mysql connector ( DO NOT MIGRATE To 9.*, protobuf upgrade destroyed peoples happiness )
    implementation 'com.mysql:mysql-connector-j:8.4.0'

    /// secret manager
    implementation 'com.google.cloud:google-cloud-secretmanager:2.78.0'
    implementation "software.amazon.awssdk:secretsmanager:$aws_client_version"
    implementation 'com.azure:azure-security-keyvault-secrets:4.10.4'

    ///// Graal JS Compilation - these needs to be upgraded module path
    graalJSCompileModule "org.graalvm.compiler:compiler:$graal_version"
    graalJSCompileModule "org.graalvm.compiler:compiler-management:$graal_version"
    graalJSCompileModule "org.graalvm.truffle:truffle-api:$graal_version"
    graalJSCompileModule "org.graalvm.truffle:truffle-compiler:$graal_version"
    graalJSCompileModule "org.graalvm.polyglot:polyglot:$graal_version"
    graalJSCompileModule "org.graalvm.sdk:graal-sdk:$graal_version"
    graalJSCompileModule "org.graalvm.sdk:collections:$graal_version"


    ///// test stuff
    testImplementation 'junit:junit:4.13.2'
    // JDBC
    testImplementation 'org.apache.derby:derby:10.17.1.0'
    // REDIS
    testImplementation 'it.ozimov:embedded-redis:0.7.3'
    // WebSocket
    testImplementation 'org.java-websocket:Java-WebSocket:1.6.0'
    // Mockito ...
    testImplementation "org.mockito:mockito-core:$mockito_version"
}

/**
 * Later will think about it ****************
shadowJar {
    /// https://stackoverflow.com/questions/55484043/how-to-fix-could-not-find-policy-pick-first-with-google-tts-java-client
    /// I got this error when I deployed on GCP
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class' : "cowj.App"
    }
}
***********************************/

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "cowj/App.class"
            ])
        }))
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    withSourcesJar()
    withJavadocJar()
}

application {
    // Define the main class for the application.
    mainClass = 'cowj.App'
}

tasks.register('copyAllDependencies', Copy) {
    into "${rootDir}/app/build/libs/deps"
    // regular dependencies gets into deps folder
    from configurations.runtimeClasspath
}

tasks.register('copyGraalCompiler', Copy) {

    into "${rootDir}/app/build/libs/graal"
    /*
     graal vm modules gets into graal folder
     Where they should be added to the running JVM module as follows
     to ensure graal languages gets compiled to JVM and run fast, really fast:

     -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI \
     --add-exports=java.base/jdk.internal.misc=jdk.graal.compiler \
     --upgrade-module-path="${rootDir}/app/build/libs/graal"

     */
    from configurations.graalJSCompileModule
}


build.dependsOn(copyAllDependencies)
build.dependsOn(copyGraalCompiler)


jar {
    // Keep jar clean:
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'
    manifest {
        attributes 'Main-Class': 'cowj.App',
                "cowj-build-on" : new Date().format('yyyy-MM-dd HH:mm:ss'), // setup the build time to be absolutely sure
                'Class-Path': configurations.runtimeClasspath.files.collect { "deps/$it.name" }.join(' ')
    }
    // to execute anything, go to the libs folder, and then do java -jar cowj
    // the deps folder should have all dependencies
}

gradle.taskGraph.whenReady { // https://stackoverflow.com/questions/75715341/toolchain-from-executable-property-does-not-match-toolchain-from-javalauncher
    tasks.withType(JavaExec) {
        if (name.endsWith(".main()")) {
            println("Setting executable to java launcher for ${name}")
            it.setExecutable(javaLauncher.get().executablePath.asFile.absolutePath)
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'cowj'
            from components.java
            pom {
                name = 'cowj'
                description = 'A declarative polyglot http end point creator on JVM'
                url = 'https://github.com/nmondal/cowj'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'nmondal'
                        name = 'Nabarun Mondal'
                        email = 'nabarun.mondal@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:nmondal/cowj.git'
                    developerConnection = 'scm:git:git@github.com:nmondal/cowj.git'
                    url = 'https://github.com/nmondal/cowj'
                }
            }
        }
    }
    repositories {
        maven {
            name = 'ossrh'
            credentials(PasswordCredentials)
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
}