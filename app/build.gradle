/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // https://imperceptiblethoughts.com/shadow/introduction/
    id 'com.github.johnrengelman.shadow'  version "8.1.1"
    // code coverage jacoco
    id 'jacoco'
    // maven publish
    id 'maven-publish'
}

// the maven identifiers
group = 'org.zoomba-lang'
archivesBaseName = 'cowj'
version = '0.1-SNAPSHOT'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    // add sonatype repository
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    gradlePluginPortal()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'
    // local libraries - snapshot moved to org.zoomba-lang
    implementation 'org.zoomba-lang:zoomba.lang.core:0.3-SNAPSHOT'
    implementation 'org.zoomba-lang:spark-core:3-JDK17-SNAPSHOT'
    // end of local libraries
    // TODO cron
    implementation 'org.slf4j:slf4j-jdk14:2.0.7'
    // Scripting Engines JSR-223
    implementation 'org.mozilla:rhino-engine:1.7.14' //js
    // groovy
    implementation 'org.apache.groovy:groovy:4.0.12'
    implementation 'org.apache.groovy:groovy-jsr223:4.0.12'
    // jython ???
    implementation 'org.python:jython:2.7.3'

    // Cron
    // https://mvnrepository.com/artifact/org.quartz-scheduler/quartz
    implementation 'org.quartz-scheduler:quartz:2.5.0-rc1'

    // Storage...
    implementation 'redis.clients:jedis:5.0.0-beta1'
    implementation 'com.google.cloud:google-cloud-storage:2.22.3'

    // fcm
    implementation 'com.google.firebase:firebase-admin:9.2.0'

    // mysql connector
    implementation 'com.mysql:mysql-connector-j:8.0.33'

    /// secret manager
    implementation 'com.google.cloud:google-cloud-secretmanager:2.19.0'

    ///// test stuff
    testImplementation 'junit:junit:4.13.2'
    // JDBC
    testImplementation 'org.apache.derby:derby:10.16.1.1'
    // REDIS
    testImplementation 'it.ozimov:embedded-redis:0.7.3'
    // Mockito ...
    testImplementation 'org.mockito:mockito-core:5.4.0'
}

shadowJar {
    /// https://stackoverflow.com/questions/55484043/how-to-fix-could-not-find-policy-pick-first-with-google-tts-java-client
    /// I got this error when I deployed on GCP
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class' : "cowj.App"
    }
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withSourcesJar()
}

application {
    // Define the main class for the application.
    mainClass = 'cowj.App'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'cowj'
            from components.java
            pom {
                name = 'cowj'
                description = 'A declarative polyglot http end point creator on JVM'
                url = 'https://github.com/nmondal/cowj'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'nmondal'
                        name = 'Nabarun Mondal'
                        email = 'nabarun.mondal@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:nmondal/cowj.git'
                    developerConnection = 'scm:git:git@github.com:nmondal/cowj.git'
                    url = 'https://github.com/nmondal/cowj'
                }
            }
        }
    }
    repositories {
        maven {
            name = 'ossrh'
            credentials(PasswordCredentials)
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
}