/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {

    id 'base'
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // https://imperceptiblethoughts.com/shadow/introduction/
    // id 'com.github.johnrengelman.shadow'  version "8.1.1"
    // code coverage jacoco
    id 'jacoco'
    // dependencies update check
    id "com.github.ben-manes.versions" version "0.51.0"
    // maven publish
    id 'maven-publish'
}
ext {
    // if this property is set, then we are add the coverage stuff
    isCoverage =  System.properties['cowj.cover'] != null
    zmbPrefix = isCoverage ?  'INSTRUMENTED-' : '' // handle coverage binary
    zmbBinary = 'org.zoomba-lang:zoomba.lang.core:' + zmbPrefix + '0.3-SNAPSHOT'
}

// the maven identifiers
group = 'org.zoomba-lang'
version = isCoverage ? '0.1-cover-SNAPSHOT' :  '0.1-SNAPSHOT'

base{
    archivesName = 'cowj'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    // add sonatype repository
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    gradlePluginPortal()
}


dependencies {

    implementation zmbBinary
    implementation 'org.zoomba-lang:spark-core:3.0'
    // end of local libraries
    implementation 'org.slf4j:slf4j-jdk14:2.1.0-alpha1'
    // Scripting Engines JSR-223
    implementation 'org.mozilla:rhino-engine:1.7.14' //js
    implementation 'com.github.a-langer:jsr223-commonjs-modules:1.0.1'

    // groovy
    implementation 'org.apache.groovy:groovy:5.0.0-alpha-5'
    implementation 'org.apache.groovy:groovy-jsr223:5.0.0-alpha-5'
    // jython ???
    implementation 'org.python:jython-standalone:2.7.3'
    // Kotlin - hold all libs to same version, as long as it works
    implementation 'org.jetbrains.kotlin:kotlin-compiler-embeddable:1.9.22'
    implementation 'org.jetbrains.kotlin:kotlin-scripting-jsr223:1.9.22'

    // Cron
    // https://mvnrepository.com/artifact/org.quartz-scheduler/quartz
    implementation 'org.quartz-scheduler:quartz:2.5.0-rc1'

    // schema handler
    implementation 'org.zoomba-lang:medeia-validator-jackson:1.5'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'

    // Auth
    implementation 'org.casbin:jcasbin:1.46.0'

    // File Watching ....
    implementation 'io.methvin:directory-watcher:0.18.0'

    // Expiring map
    // For Auth Token, JDBC Connection Expiry,
    implementation 'net.jodah:expiringmap:0.5.11'
    ////////// Plugin Stuff //////////////

    // Storage...
    implementation 'redis.clients:jedis:5.2.0-alpha2'
    implementation 'com.google.cloud:google-cloud-storage:2.33.0'
    implementation 'software.amazon.awssdk:s3:2.23.21'
    implementation 'software.amazon.awssdk:apache-client:2.23.21'

    // fcm
    implementation 'com.google.firebase:firebase-admin:9.2.0'

    // mysql connector
    implementation 'com.mysql:mysql-connector-j:8.3.0'

    /// secret manager
    implementation 'com.google.cloud:google-cloud-secretmanager:2.34.0'

    ///// test stuff
    testImplementation 'junit:junit:4.13.2'
    // JDBC
    testImplementation 'org.apache.derby:derby:10.17.1.0'
    // REDIS
    testImplementation 'it.ozimov:embedded-redis:0.7.3'
    // Mockito ...
    testImplementation 'org.mockito:mockito-core:5.10.0'
}

/**
 * Later will think about it ****************
shadowJar {
    /// https://stackoverflow.com/questions/55484043/how-to-fix-could-not-find-policy-pick-first-with-google-tts-java-client
    /// I got this error when I deployed on GCP
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class' : "cowj.App"
    }
}
***********************************/

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "cowj/App.class"
            ])
        }))
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
    withJavadocJar()
}

application {
    // Define the main class for the application.
    mainClass = 'cowj.App'
}

tasks.register('copyAllDependencies', Copy) {
    from configurations.runtimeClasspath
    into "${rootDir}/app/build/libs/deps"
}
build.dependsOn(copyAllDependencies)

jar {
    // Keep jar clean:
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'
    manifest {
        attributes 'Main-Class': 'cowj.App',
                "cowj-build-on" : new Date().format('yyyy-MM-dd HH:mm:ss'), // setup the build time to be absolutely sure
                'Class-Path': configurations.runtimeClasspath.files.collect { "deps/$it.name" }.join(' ')
    }
    // to execute anything, go to the libs folder, and then do java -jar cowj
    // the deps folder should have all dependencies
}

gradle.taskGraph.whenReady { // https://stackoverflow.com/questions/75715341/toolchain-from-executable-property-does-not-match-toolchain-from-javalauncher
    tasks.withType(JavaExec) {
        if (name.endsWith(".main()")) {
            println("Setting executable to java launcher for ${name}")
            it.setExecutable(javaLauncher.get().executablePath.asFile.absolutePath)
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'cowj'
            from components.java
            pom {
                name = 'cowj'
                description = 'A declarative polyglot http end point creator on JVM'
                url = 'https://github.com/nmondal/cowj'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'nmondal'
                        name = 'Nabarun Mondal'
                        email = 'nabarun.mondal@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:nmondal/cowj.git'
                    developerConnection = 'scm:git:git@github.com:nmondal/cowj.git'
                    url = 'https://github.com/nmondal/cowj'
                }
            }
        }
    }
    repositories {
        maven {
            name = 'ossrh'
            credentials(PasswordCredentials)
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
}