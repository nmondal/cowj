/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cowj;

import org.junit.Assert;
import org.junit.Test;

import java.io.File;
import java.util.Map;

import static org.junit.Assert.assertThrows;

public class ModelTest {

    static final boolean isWindows = File.separator.equals( "\\" ) ;

    final String p = "samples/hello/hello.yaml" ;
    final String pj = "samples/proxy/proxy.json" ;

    final String wm = "samples/proxy/proxy.zm" ;

    @Test
    public void loadingTest(){
        Model m = Model.from(p);
        Assert.assertNotNull(m);
        Assert.assertFalse(m.routes().isEmpty());
        Assert.assertFalse(m.threading().isEmpty());
        Assert.assertFalse(m.filters().isEmpty());
        Assert.assertFalse(m.dataSources().isEmpty());
        Assert.assertEquals( 5003, m.port());
        Assert.assertTrue( m.base().endsWith("samples" + File.separator + "hello"));
        Assert.assertFalse( m.cron().isEmpty() );
    }

    @Test
    public void templateTests(){
        Model m = Model.from(p);
        Map<String,Object> ctx = Map.of("a", "Hello", "b" , "World" );
        String r = m.template("${a} , ${b}!", ctx);
        Assert.assertEquals("Hello , World!", r);
        r = m.template("${c} , ${d}!", ctx);
        Assert.assertEquals("?c , ?d!", r);

        // Happy case ...
        r = Model.formatParams("${a} , ${b}!", ctx);
        Assert.assertEquals("Hello , World!", r);
        // Now need to throw Error and check if works
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Model.formatParams( "${a} + ${xxx}", ctx);
        });
        Assert.assertTrue( exception.getMessage().contains("'xxx'"));
    }

    @Test
    public void templateEnvTests(){
        Model m = Model.from(p);
        String templateMacro = isWindows ? "Hello, ${USERNAME}!" : "Hello, ${USER}!" ;
        String r = m.envTemplate(templateMacro);
        Assert.assertFalse(r.contains("?"));
        Assert.assertTrue(r.contains("Hello, "));
    }

    @Test
    public void jsonLoadTest(){
        // should it be used.. like at all?
        Model m = Model.from(pj);
        Assert.assertNotNull(m);
        Assert.assertFalse(m.auth().isEmpty()); // auth should be empty
        Assert.assertFalse(m.proxies().isEmpty()); // proxies should not be empty
        // port is redirected and will not be what it is .. so...
        Assert.assertEquals( 8080, m.port());
    }

    @Test
    public void nonExistingFileTest(){
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Model.from("foo/bar.yaml");
        });
        Assert.assertNotNull(exception);
        Assert.assertTrue( exception.getMessage().contains("exists"));
        Assert.assertTrue( exception.getMessage().contains("foo" + File.separator + "bar.yaml"));
    }

    @Test
    public void wrongTypeOfFileTest(){
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Model.from(wm);
        });
        Assert.assertNotNull(exception);
        Assert.assertTrue( exception.getMessage().contains("Invalid Type"));
        Assert.assertTrue( exception.getMessage().contains( "proxy.zm" ));
    }

}
